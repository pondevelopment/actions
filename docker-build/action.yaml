name: "Docker Build"
description: "Build a docker image and push it to GCR"

inputs:
  GCP_SA_KEY:
    required: true
    description: "the secret serviceaccount json"
  PROJECT_ID:
    required: true
    description: "gcp project target for the container"
  SERVICE_NAME:
    required: true
    description: "the name provided to the docker container"
  NPM_REGISTRY_TOKEN:
    required: true
    description: "Your personal access token - PAT"
  DOCKER_TAG:
    required: true
    description: "the tag provided for the docker container"
outputs:
  DOCKER_IMAGE:
    description: "The docker image url - base64 encoded"
    value: ${{steps.prepare.outputs.tagged_image_enc}}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - id: "auth"
      uses: "google-github-actions/auth@v0"
      with:
        credentials_json: "${{ inputs.GCP_SA_KEY }}"

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ inputs.PROJECT_ID }}
        export_default_credentials: true # Set to true to authenticate the Cloud Run action

    - name: Authorize Docker push
      shell: bash
      run: gcloud auth configure-docker --quiet

    - name: Prepare
      shell: bash
      id: prepare
      run: |
        TAG=${{ inputs.DOCKER_TAG }}
        IMAGE="eu.gcr.io/${{ inputs.PROJECT_ID }}/${{ inputs.SERVICE_NAME }}"
        echo ::set-output name=tagged_image::${IMAGE}:${TAG}
        echo ::set-output name=tagged_image_enc::$(echo -n '${IMAGE}:${TAG}' | base64 | base64)
        echo ::set-output name=tag::${TAG}

    - name: Build development image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        push: true
        # Note: load is used to store the image in the local docker daemon for use in another step
        #load: true
        tags: ${{ steps.prepare.outputs.tagged_image }}
        # build arg used for accessing the private repository for npm modules
        build-args: |
          "NPM_TOKEN=${{ inputs.NPM_REGISTRY_TOKEN }}"
          "NODE_ENVIRONMENT=${{inputs.NODE_ENVIRONMENT}}"

    - name: Logging
      shell: bash
      env:
        TAGGED_IMAGE: ${{steps.prepare.outputs.tagged_image_enc}}
      run: |
        echo "Docker Image: $(echo $TAGGED_IMAGE | base64 --decode | base64 --decode)"